package org.arachna.ant;

import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.arachna.netweaver.dc.types.DevelopmentComponent;
import org.arachna.netweaver.dc.types.DevelopmentComponentType;

/**
 * Factory for file set exclude expressions based on development component type.
 * 
 * @author Dirk Weigenand
 */
public class ExcludesFactory {
    /**
     * Mapping from {@link DevelopmentComponentType} to a default set of
     * excludes.
     */
    private Map<DevelopmentComponentType, Collection<String>> excludesMapping =
        new HashMap<DevelopmentComponentType, Collection<String>>();

    /**
     * Mapping from {@link DevelopmentComponentType} to a default set of
     * excludes via a contains regex.
     */
    private Map<DevelopmentComponentType, Collection<String>> containsRegexpExcludesMapping =
        new HashMap<DevelopmentComponentType, Collection<String>>();

    /**
     * Create an instance of {@link ExcludesFactory}. Initializes the mapping
     * from development component types to standard ant file set excludes.
     */
    public ExcludesFactory() {
        this.excludesMapping.put(
            DevelopmentComponentType.WebDynpro,
            Arrays.asList(new String[] { "**/wdp/*.java", "**/*Interface.java", "**/*InterfaceCfg.java",
                "**/*InterfaceView.java" }));
        this.containsRegexpExcludesMapping.put(
            DevelopmentComponentType.WebDynpro,
            Arrays.asList(new String[] {
                ".*?extends com.sap.engine.services.webservices.jaxrpc.wsdl2java.(BaseGeneratedStub|ServiceBase).*?",
                ".*?RFC Adapter Model.*?", ".*?generated by SAP (WSDL|Schema) to Java generator.*?",
                ".*?Web[sS]ervice Model(Class)? implementation.*?",
                ".*?This file has been generated by the Web Dynpro Code Generator.*?",
                ".*?File created by Web Dynpro code generator.*?"}));

        List<String> containsRegexes =
            Arrays.asList(new String[] {
                ".*?extends com.sap.engine.services.webservices.jaxrpc.wsdl2java.(BaseGeneratedStub|ServiceBase).*?",
                ".*?RFC Adapter Model.*?", ".*?generated by SAP (WSDL|Schema) to Java generator.*?",
                ".*?Web[sS]ervice Model(Class)? implementation.*?" });

        this.containsRegexpExcludesMapping.put(DevelopmentComponentType.J2EEWebModule, containsRegexes);
        this.containsRegexpExcludesMapping.put(DevelopmentComponentType.Java, containsRegexes);
        this.containsRegexpExcludesMapping.put(DevelopmentComponentType.PortalApplicationModule, containsRegexes);
        this.containsRegexpExcludesMapping.put(DevelopmentComponentType.PortalApplicationStandalone, containsRegexes);
        this.containsRegexpExcludesMapping.put(DevelopmentComponentType.WebServicesDeployableProxy, containsRegexes);
    }

    /**
     * Returns the excludes that are default for the type of the given
     * development component joined with the given collection of configured
     * excludes.
     * 
     * @param component
     *            development component to determine the set of excludes for.
     * @param configuredExcludes
     *            configured excludes
     * @return collection of excludes determined by development component type
     *         and configured excludes.
     */
    public String[] create(DevelopmentComponent component, Collection<String> configuredExcludes) {
        Collection<String> defaultExcludes = this.excludesMapping.get(component.getType());

        return mergeExcludes(configuredExcludes, defaultExcludes);
    }

    /**
     * Returns the contains regexp excludes that are default for the type of the
     * given development component joined with the given collection of
     * configured excludes.
     * 
     * @param component
     *            development component to determine the set of excludes for.
     * @param configuredExcludes
     *            configured excludes
     * @return collection of excludes determined by development component type
     *         and configured excludes.
     */
    public String[] createContainsRegexpExcludes(DevelopmentComponent component, Collection<String> configuredExcludes) {
        Collection<String> defaultExcludes = this.containsRegexpExcludesMapping.get(component.getType());

        return mergeExcludes(configuredExcludes, defaultExcludes);
    }

    /**
     * Merge the given default excludes with the given configured excludes.
     * 
     * @param configuredExcludes
     *            configured excludes per caller (plugin)
     * @param defaultExcludes
     *            default excludes (from this <code>ExcludesFactory</code>).
     * @return the union of the given configured and default excludes.
     */
    private String[] mergeExcludes(Collection<String> configuredExcludes, Collection<String> defaultExcludes) {
        Set<String> excludes = new HashSet<String>();

        if (defaultExcludes != null) {
            excludes.addAll(defaultExcludes);
        }

        if (configuredExcludes != null) {
            excludes.addAll(configuredExcludes);
        }

        return excludes.toArray(new String[excludes.size()]);
    }
}
